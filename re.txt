gw4-4
AC:9A:20:CA:81:BC
LAN MAC: AC:9A:20:CA:81:BC
Master WiFi: 40:A3:6B:CA:81:BA
Client WiFi: 40:A3:6B:CA:81:BB

----------------------------------------------



برای راه‌اندازی سرور داخلی، مراحل زیر را انجام دهید:

# راه‌اندازی سرور داخلی مانیتورینگ

## مرحله 1: ایجاد ساختار پوشه و محیط مجازی

ابتدا پوشه‌های مورد نیاز را ایجاد کرده و یک محیط مجازی پایتون تنظیم می‌کنیم:

```bash
# لاگین با کاربر zzz
su - zzz

# ایجاد پوشه برای پروژه مانیتورینگ
mkdir -p ~/monitoring-xxx
cd ~/monitoring-xxx

# ایجاد محیط مجازی پایتون
python3 -m venv www

# فعال‌سازی محیط مجازی
source www/bin/activate

# نصب بسته‌های مورد نیاز
pip install flask requests pytz apscheduler
```

## مرحله 2: ایجاد ساختار فایل‌ها

حالا فایل‌های مورد نیاز برای سرور داخلی را ایجاد می‌کنیم:

```bash
# ایجاد پوشه templates
mkdir -p templates

# ایجاد فایل پایتون اصلی
touch internal_server.py

# ایجاد پوشه برای دیتابیس
mkdir -p data
```

## مرحله 3: آماده‌سازی کد 

محتوای فایل `internal_server.py` را از کد‌های قبلی که ارائه دادم کپی کنید. فقط مطمئن شوید آدرس سرور خارجی را به درستی تنظیم کنید:

```python
# تغییر این خط در فایل internal_server.py
EXTERNAL_SERVER = 'http://185.80.196.129:6500'
```

همچنین فایل HTML را در پوشه `templates` با نام `index.html` قرار دهید.

## مرحله 4: ایجاد سرویس systemd

برای اینکه برنامه همیشه اجرا بماند، یک سرویس systemd ایجاد می‌کنیم:

```bash
# به کاربر روت تغییر دهید
sudo su

# ایجاد فایل سرویس
cat > /etc/systemd/system/network-monitor-internal.service << 'EOF'
[Unit]
Description=Internal Network Monitoring Server
After=network.target

[Service]
User=zzz
WorkingDirectory=/home/zzz/monitoring-xxx
ExecStart=/home/zzz/monitoring-xxx/www/bin/python3 /home/zzz/monitoring-xxx/internal_server.py
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

# بارگذاری مجدد سرویس‌ها
systemctl daemon-reload

# فعال‌سازی سرویس
systemctl enable network-monitor-internal

# شروع سرویس
systemctl start network-monitor-internal
```

## مرحله 5: بررسی وضعیت سرویس

برای اطمینان از اجرای صحیح سرویس، وضعیت آن را بررسی کنید:

```bash
# بررسی وضعیت سرویس
systemctl status network-monitor-internal

# مشاهده لاگ‌ها در صورت بروز مشکل
journalctl -u network-monitor-internal -n 50
```

## متغیرهای قابل تغییر

در صورتی که نیاز به تغییر هر یک از موارد زیر دارید، باید در فایل‌های مربوطه تغییرات لازم را اعمال کنید:

1. **نام کاربر:** اگر به جای `zzz` از نام کاربر دیگری استفاده می‌کنید، مسیرها را در فایل سرویس systemd تغییر دهید.

2. **نام پوشه پروژه:** اگر به جای `monitoring-xxx` از نام دیگری استفاده می‌کنید، مسیرها را در فایل سرویس systemd تغییر دهید.

3. **نام محیط مجازی:** اگر به جای `www` از نام دیگری استفاده می‌کنید، مسیر محیط مجازی را در فایل سرویس systemd تغییر دهید.

4. **آدرس سرور خارجی:** متغیر `EXTERNAL_SERVER` را در فایل `internal_server.py` به آدرس صحیح سرور خارجی تغییر دهید.

5. **پورت سرور داخلی:** اگر می‌خواهید از پورت دیگری به جای 5000 استفاده کنید، خط آخر فایل `internal_server.py` را تغییر دهید:
   ```python
   app.run(host='0.0.0.0', port=PORT_NUMBER, debug=True)
   ```

6. **بازه زمانی بررسی دستگاه‌ها:** برای تغییر بازه زمانی از هر 1 دقیقه به مقدار دیگر، این خط را در تابع `start_scheduler` تغییر دهید:
   ```python
   scheduler.add_job(check_all_devices, 'interval', minutes=TIME_INTERVAL)
   ```

## اسکریپت کامل راه‌اندازی

برای سهولت در راه‌اندازی، می‌توانید از اسکریپت زیر استفاده کنید:

```bash
#!/bin/bash

# تنظیمات متغیرها
USER_NAME="zzz"
PROJECT_DIR="monitoring-xxx"
VENV_NAME="www"
EXTERNAL_SERVER="185.80.196.129:6500"
INTERNAL_PORT="5000"

# ایجاد پوشه پروژه
mkdir -p /home/$USER_NAME/$PROJECT_DIR
cd /home/$USER_NAME/$PROJECT_DIR

# ایجاد محیط مجازی
python3 -m venv $VENV_NAME
source $VENV_NAME/bin/activate

# نصب بسته‌های مورد نیاز
pip install flask requests pytz apscheduler

# ایجاد ساختار فایل‌ها
mkdir -p templates
mkdir -p data

# ایجاد فایل سرویس systemd
cat > /etc/systemd/system/network-monitor-internal.service << EOF
[Unit]
Description=Internal Network Monitoring Server
After=network.target

[Service]
User=$USER_NAME
WorkingDirectory=/home/$USER_NAME/$PROJECT_DIR
ExecStart=/home/$USER_NAME/$PROJECT_DIR/$VENV_NAME/bin/python3 /home/$USER_NAME/$PROJECT_DIR/internal_server.py
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

# بارگذاری مجدد systemd
systemctl daemon-reload
systemctl enable network-monitor-internal

echo "راه‌اندازی سرور داخلی مانیتورینگ با موفقیت انجام شد."
echo "لطفاً کد سرور داخلی را در فایل internal_server.py قرار دهید و سپس سرویس را با دستور زیر راه‌اندازی کنید:"
echo "sudo systemctl start network-monitor-internal"
```

اطمینان حاصل کنید که اسکریپت بالا را با دسترسی روت اجرا می‌کنید. پس از اجرای اسکریپت، فایل `internal_server.py` را با کد ارائه شده در قسمت‌های قبلی پر کنید و سرویس را راه‌اندازی کنید.



کد کامل سرور داخلی (internal server) را برای شما می‌فرستم:

این کد کامل برای سرور داخلی است که وظیفه بررسی وضعیت دستگاه‌ها و ارسال داده‌ها به سرور خارجی را دارد.

بخش‌های مهم کد:

1. **تنظیم آدرس سرور خارجی**: 
   ```python
   EXTERNAL_SERVER = 'http://185.80.196.129:6500'
   ```
   در صورت نیاز، این آدرس را تغییر دهید.

2. **تنظیم آی‌پی دستگاه‌ها**:
   در بخش‌های `GATEWAYS` و `CLIENTS` می‌توانید لیست دستگاه‌ها را متناسب با شبکه خود تغییر دهید.

3. **فاصله زمانی بین بررسی‌ها**:
   ```python
   scheduler.add_job(check_all_devices, 'interval', minutes=1)
   ```
   این بخش تعیین می‌کند که هر چند دقیقه یکبار دستگاه‌ها بررسی شوند.

4. **پورت سرور داخلی**:
   ```python
   app.run(host='0.0.0.0', port=5000, debug=True)
   ```
   در صورت نیاز می‌توانید پورت 5000 را به پورت دیگری تغییر دهید.

برای راه‌اندازی، این کد را در فایل `internal_server.py` در پوشه پروژه خود قرار دهید. فایل HTML را نیز در پوشه `templates` با نام `index.html` 














قرار دهید. سپس با استفاده از سرویس systemd که قبلاً آماده کردیم، برنامه را اجرا کنید.














برای حل مشکل شما، چند روش مختلف وجود دارد که میتوانید فلسک را به صورت دائمی اجرا کنید. مشکل Permission Denied احتمالاً به دلیل روش ایجاد فایل سرویس است.

## روش اول: اصلاح روش ایجاد فایل سرویس

برای ایجاد فایل سرویس به صورت صحیح از sudo استفاده کنید:

```bash
sudo bash -c 'cat > /etc/systemd/system/network-monitor-internal.service << EOF
[Unit]
Description=Internal Network Monitoring Server
After=network.target

[Service]
User=sarhadi
WorkingDirectory=/home/sarhadi/iot-monitor
ExecStart=/home/sarhadi/iot-monitor/www/bin/python3 /home/sarhadi/iot-monitor/app.py
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF'
```

سپس سرویس را فعال و اجرا کنید:

```bash
sudo systemctl daemon-reload
sudo systemctl enable network-monitor-internal.service
sudo systemctl start network-monitor-internal.service
```

## روش دوم: استفاده از Screen یا Tmux

اگر نمی‌خواهید از systemd استفاده کنید، می‌توانید از Screen یا Tmux استفاده کنید:

### با استفاده از Screen:

```bash
# نصب screen
sudo apt-get install screen

# اجرای اپلیکیشن در یک screen
screen -S flask_app
cd /home/sarhadi/iot-monitor
./www/bin/python3 app.py

# برای خروج از صفحه بدون بستن برنامه: Ctrl+A و سپس D
# برای اتصال مجدد:
screen -r flask_app
```

### با استفاده از Tmux:

```bash
# نصب tmux
sudo apt-get install tmux

# اجرای اپلیکیشن در یک tmux session
tmux new -s flask_app
cd /home/sarhadi/iot-monitor
./www/bin/python3 app.py

# برای خروج از صفحه بدون بستن برنامه: Ctrl+B و سپس D
# برای اتصال مجدد:
tmux attach -t flask_app
```

## روش سوم: استفاده از nohup

```bash
cd /home/sarhadi/iot-monitor
nohup ./www/bin/python3 app.py > flask.log 2>&1 &
```

## روش چهارم: استفاده از supervisor

```bash
# نصب supervisor
sudo apt-get install supervisor

# ایجاد فایل کانفیگ
sudo nano /etc/supervisor/conf.d/flask_app.conf
```

محتوای فایل:
```
[program:flask_app]
directory=/home/sarhadi/iot-monitor
command=/home/sarhadi/iot-monitor/www/bin/python3 app.py
user=sarhadi
autostart=true
autorestart=true
stderr_logfile=/var/log/flask_app.err.log
stdout_logfile=/var/log/flask_app.out.log
```

سپس:
```bash
sudo supervisorctl reread
sudo supervisorctl update
sudo supervisorctl start flask_app
```

systemd مطمئن‌ترین و توصیه‌شده‌ترین روش است، زیرا پس از ریستارت سیستم نیز به صورت خودکار اجرا می‌شود.



